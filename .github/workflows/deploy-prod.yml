name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Production release tag'
        required: true

env:
  ENVIRONMENT: production
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format. Expected: v*.*.* (e.g., v1.0.0)"
            exit 1
          fi
      
      - name: Check changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "Changelog found"
          else
            echo "Warning: No CHANGELOG.md found"
          fi

  build-and-deploy-frontend:
    name: Build and Deploy Frontend (Production)
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NODE_ENV: production
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # Deployment step - requires manual approval via environment protection rules
      # Configure in GitHub Settings > Environments > production
      # - name: Deploy to Production Environment
      #   environment: production
      #   run: |
      #     # Add production deployment commands here
      #     echo "Deploying to production environment..."
      
      - name: Create deployment marker
        run: |
          echo "Frontend deployed to production at $(date)"
          echo "Version: ${{ github.ref_name }}"
          echo "Image: ${{ steps.meta.outputs.tags }}"

  build-and-deploy-backend:
    name: Build and Deploy Backend (Production)
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run tests
        working-directory: ./backend
        run: npm test
        env:
          MONGODB_URI: ${{ secrets.PROD_MONGODB_URI }}
          JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          NODE_ENV: test
      
      - name: Build application
        working-directory: ./backend
        run: npm run build
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # Deployment step - requires manual approval via environment protection rules
      # - name: Deploy to Production Environment
      #   environment: production
      #   run: |
      #     # Add production deployment commands here
      #     echo "Deploying to production environment..."
      
      - name: Create deployment marker
        run: |
          echo "Backend deployed to production at $(date)"
          echo "Version: ${{ github.ref_name }}"
          echo "Image: ${{ steps.meta.outputs.tags }}"

  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, build-and-deploy-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test commands here
          # curl -f https://your-production-url/health || exit 1
      
      - name: Run health checks
        run: |
          echo "Checking service health..."
          # Add health check commands here

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, build-and-deploy-backend, post-deployment-tests]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## What's Changed
            
            Deployed to production at $(date)
            
            ### Docker Images
            - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}`
            - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}`
            
            For full changelog, see the commit history.

  notify-stakeholders:
    name: Notify Stakeholders
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, build-and-deploy-backend, post-deployment-tests, create-release]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "Production deployment completed"
          echo "Version: ${{ github.ref_name }}"
          echo "Frontend status: ${{ needs.build-and-deploy-frontend.result }}"
          echo "Backend status: ${{ needs.build-and-deploy-backend.result }}"
          echo "Tests status: ${{ needs.post-deployment-tests.result }}"
          # Add notification service integration here (Slack, Teams, Email, etc.)
