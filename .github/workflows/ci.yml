name: CI - Build and Test

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test-frontend:
    name: Lint and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: Run unit tests
        run: npm test
        if: success() || failure()
      
      - name: Build frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: .next
          retention-days: 7

  lint-and-test-backend:
    name: Lint and Test Backend
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run unit tests
        working-directory: ./backend
        run: npm test
        if: success() || failure()
        env:
          MONGODB_URI: mongodb://localhost:27017/warehouse-admin-test
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test
      
      - name: Build backend
        working-directory: ./backend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build
          path: backend/dist
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test-frontend, lint-and-test-backend]
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
      
      - name: Start backend
        working-directory: ./backend
        run: |
          npm run build
          npm run start:prod &
          sleep 10
        env:
          MONGODB_URI: mongodb://localhost:27017/warehouse-admin-test
          JWT_SECRET: test-secret-key-for-ci
          PORT: 3001
          NODE_ENV: production
          CORS_ORIGIN: http://localhost:3000
      
      - name: Start frontend
        run: |
          npm run build
          npm run start &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit (Frontend)
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run npm audit (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=high
        continue-on-error: true
