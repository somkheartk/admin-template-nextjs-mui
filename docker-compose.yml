version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:latest
    container_name: warehouse-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: warehouse-admin
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: warehouse-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/warehouse-admin
      - PORT=3001
      - NODE_ENV=development
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:3001/api
    container_name: warehouse-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - warehouse-network

networks:
  warehouse-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
